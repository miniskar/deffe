{
    "python_path" : ["."],
    "knobs" : 
        [
        { 
            "name" : "l1d_ways",
            "groups" : "riscv0",
            "values" : [1, 2, 4, 8]
        },
        { 
            "name" : "l1i_ways",
            "groups" : "riscv0",
            "values" : [1, 2, 4, 8]
        },
        { 
            "name" : "l2_ways",
            "groups" : "riscv0",
            "values" : [1, 2, 4, 8]
        },
        { 
            "name" : "l1d_size",
            "groups" : "riscv0",
            "values" : [1, 2, 4, 8, 16, 32, 64]
        },
        { 
            "name" : "l1i_size",
            "groups" : "riscv0",
            "values" : [1, 2, 4, 8, 16, 32, 64]
        },
        { 
            "name" : "l2_size",
            "groups" : "riscv0",
            "values" : [1, 2, 4, 8, 16, 32, 64, 128, 256]
        },
        { 
            "name" : "cacheline",
            "groups" : "riscv0",
            "values" : [16, 32, 64, 128]
        }
    ],
    "scenarios" : 
        [
        {
            "name" : "matmul_size",
            "map" : "options",
            "groups" : "matmul",
            "values" : [16, 32, 64, 128, 256]
        },
        {
            "name" : "kmeans_objects",
            "map" : "options",
            "groups" : "kmeans",
            "values" : "100-100100-100"
        },
        {
            "name" : "nw_size",
            "map" : "options",
            "groups" : "nw",
            "values" : [16, 32, 64, 128, 256]
        },
        {
            "name" : "matmul_binary",
            "map" : "binary",
            "groups" : "matmul",
            "values" : "$DEFFE_DIR/example/mt-all-matmul-riscv-binary"
        },
        {
            "name" : "kmeans_binary",
            "map" : "binary",
            "groups" : "kmeans",
            "values" : "$DEFFE_DIR/example/kmeans-riscv-binary"
        },
        {
            "name" : "nw_binary",
            "map" : "binary",
            "groups" : "nw",
            "values" : "$DEFFE_DIR/example/nw-riscv-binary"
        },
        {
            "name" : "kmeans_input",
            "map" : "input",
            "groups" : "kmeans",
            "values" : "$DEFFE_DIR/example/kdd_cup"
        },
        {
            "name" : "kmeans_command",
            "map" : "command_file",
            "groups" : "kmeans",
            "values" : "kmeans_command_script.sh"
        },
        {
            "name" : "nw_command",
            "map" : "command_file",
            "groups" : "nw",
            "values" : "nw_command_script.sh"
        },
        {
            "name" : "matmul_command",
            "map" : "command_option",
            "groups" : "matmul",
            "values" : "matmul_command_option.sh"
        }
        ],
    "costs" : [ "cpu_cycles" ],
    "model" : {
        "pyscript" : "_ml_model.py",
        "ml_model_script" : "keras_cnn.py",
        "output_log" : "network.log",
        "arguments" : "",
        "ml_arguments" : "-convs 2 -loss custom_mean_abs_log_loss -tl-samples -epochs 2000 -train-test-split 1.0 -validation-split 0.4"
    },
    "exploration" : {
        "pyscript" : "_exploration.py",
        "arguments" : "",
        "output_log" : "exploration.log",
        "explore" : 
            [
            {
                "name" : "kmeans_explore",
                "groups" : "riscv0, kmeans",
                "pre_evaluated_data" : "output_kmeans_deffe.csv",
                "exploration_table" : "deffe_exploration.csv",
                "evaluation_table" : "deffe_evaluation.csv",
                "ml_predict_table" : "deffe_prediction.csv",
                "evaluation_predict_table" : "deffe_eval_predict.csv"
            }
            ]
    },
    "sampling" : {
        "pyscript" : "_sampling.py",
        "arguments" : "-custom-samples 560 880 1200 1520 1840 2160 2480 2800 3120 3440  3760 4720 5040",
        "output_log" : "sampling.log"
    },
    "evaluate" : {
        "pyscript"    : "_evaluate.py",
        "arguments" : "",
        "sample_evaluate_script" : "evaluate_gem5.sh",
        "slurm"     : "True",
        "batch_size"     : "400",
        "output_log"    : "evaluate.log"
    },
    "extract" : {
        "pyscript" : "_extract.py",
        "arguments" : "",
        "sample_extract_script" : "extract.sh",
        "slurm"     : "True",
        "batch_size"     : "400",
        "cost_output" : "results.out",
        "output_log" : "extract.log"
    },
    "framework" : {
        "output_log" : "framework_output.log",
        "run_directory" : "riscv_exploration"
    },
    "slurm" : {
        "nodes" : 1,
        "cpus_per_task" : 1,
        "constraint" : "x86_64,centos",
        "user_script_configured" : "False"
    }
}
